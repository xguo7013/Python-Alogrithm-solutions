#!/usr/bin/env python
# coding: utf-8

# In[10]:


import numpy as np
import pandas as pd
import csv
import matplotlib.pylab as plt
import sys


# In[34]:


file=open("Prob3_movies.txt",'r')


# In[42]:


file=open("Prob3_movies.txt",'r')
movie=[]
for x in file.readlines():
    count +=1
    movie.append(x)
    


# In[44]:


count


# In[ ]:





# In[ ]:





# In[49]:


class MF(object):
    count=1682
    num_users=943

    def __init__(self, train_set, test_set, movie_file,num_users=943, num_movies=1682,var=0.25, d=10, lmb=1):
        self.num_users = num_users
        self.num_movies = num_movies

        self.var = var
        self.d = int(d)
        self.lmb= int(lmb)

        self.read_dataset(train_set, test_set)
        self.load_movie(movie_file)

    def load_movie(self,file):
        with open(file) as f:
            self.movies = np.array([x.rstrip('\n') for x in f.readlines()])
        # print(self.movies.shape)
        # print(len(self.movies))
        # print(self.movies[:5])

    def create_matrix_from_file(self,file,train=False,test=False):
        #declare M:
        
        matrix = np.repeat(np.nan,self.num_users*self.num_movies).reshape(self.num_users, self.num_movies)
        # print(self.M.shape)

        #load info into it:
        with open(file) as f:
            for row in f:
                val = row.rstrip('\n').split(',')
                # print(val)
                matrix[int(val[0])-1, int(val[1])-1] = float(val[2])
                if train:
                    self.num_train_cases+=1
                if test:
                    self.num_test_cases+=1
        return matrix

    def read_dataset(self,train_set, test_set):
        
        self.num_train_cases = 0
        self.num_test_cases = 0

        self.M = self.create_matrix_from_file(train_set, train=True)
        self.Mtest = self.create_matrix_from_file(test_set, test=True)        
        # print(self.M.shape, self.Mtest.shape)

    def get_data(self):
        self.Q = np.repeat(np.nan,self.num_users*self.d).reshape(self.num_users, self.d)
        self.R = np.random.multivariate_normal(np.repeat(0,self.d),
                                               np.identity(self.d)/self.lmb,
                                               self.num_movies).T
        # print(self.Q.shape, self.R.shape)

    def calc_error(self, matrix):

        predicted = self.Q.dot(self.R)
        observed_ind = ~np.isnan(matrix)

        error = ((matrix[observed_ind] - predicted[observed_ind])**2).sum()
        return error

    def calc_sqsum(self,matrix):
        return (matrix**2).sum()

    def run_step(self):

        self.objective = []
        for p in range(100):
            for i in range(self.num_users):
                observed_ind = ~np.isnan(self.M[i,:])
                # print(sum(observed_ind))
                Ri = self.R[:,observed_ind]
                Mi = self.M[i,observed_ind]
                # print(Ri.shape, Mi.shape)
                self.Q[i,:] = np.linalg.inv( Ri.dot(Ri.T) + 
                                        self.lmb*self.var*np.identity(self.d)).dot(Ri.dot(Mi.T))

            for j in range(self.num_movies):
                observed_ind = ~np.isnan(self.M[:,j])
                # print(sum(observed_ind))
                Qj = self.Q[observed_ind,:]
                Mj = self.M[observed_ind,j]
                # print(Ri.shape, Mi.shape)
                self.R[:,j] = np.linalg.inv(Qj.T.dot(Qj)+self.lmb*self.var*np.identity(self.d)).dot(Qj.T.dot(Mj.T))

            # print(np.isnan(self.Q).sum(),np.isnan(self.R).sum())
            # print(self.calc_sqsum(self.Q),self.calc_sqsum(self.R),self.calc_error(self.M))
            if p>1:
                obj_neg = ( self.calc_error(self.M)/(2*self.var) + 
                           self.calc_sqsum(self.Q)*self.lmb/2 + 
                           self.calc_sqsum(self.R)*self.lmb/2 )
                self.objective.append(-obj_neg)
            # print(self.obj_neg)

    def find_map(self):

        num_runs = 10
        x_vals = list(range(2,100))

        #initialize table
        results = pd.DataFrame(index=range(num_runs),
                               columns=['s.no.','Object','RMSE'])

        #get predictions for required movies:
        self.query_movies = ["Star Wars", "My Fair Lady", "GoodFellas"]
        self.movie_results = pd.DataFrame(index=range(10),
                                     columns=self.query_movies)
        self.dist_results = pd.DataFrame(index=range(10),
                                     columns=self.query_movies)

        #define minimum objective:
        max_obj = -np.inf
        results['s.no.'] = list(range(1,num_runs+1))

        plt.figure()
        for i in range(num_runs):
            self.get_data()

            self.run_step()

            plt.plot(x_vals, self.objective, label='run_%d'%(i+1))

            #get objective:
            results.loc[i,'Object'] = self.objective[-1]
            results.loc[i,'RMSE'] = np.sqrt(self.calc_error(self.Mtest)/self.num_test_cases)

            #update movie pred if required:
            if self.objective[-1]>max_obj:
                max_obj = self.objective[-1]
                self.update_query_results()

        plt.xticks([int(x) for x in np.linspace(2,100,10)])
        plt.xlabel('Iteration')
        plt.ylabel('Objective Function')
        plt.title('Training function for 10 runs')
        plt.legend(loc='best')
        
        plt.show()

        #export objective:
        results = results.sort_values(by='Object',axis=0,ascending=False)
        print(results)
        #results.to_csv('hw4_2a_obj_rmse.csv',index=False)

        #print query results
        print(self.movie_results)
        print(self.dist_results)

        self.movie_results.to_csv('hw4_2b_query_movie.csv',index=False)
        self.dist_results.to_csv('hw4_2b_query_distances.csv',index=False)
    
    def update_query_results(self):

        for movie in self.query_movies:
            movie_id = [i for i in range(self.num_movies) 
                        if movie in self.movies[i]][0]
            # print(movie_id)
            distances = np.sqrt(((self.R - self.R[:,movie_id].reshape(-1,1))**2).sum(axis=0))
            
            # print(distances.shape)
            min_movies_id = np.argsort(distances)[1:11]
            # print(min_movies_id)
            # print(self.movies[min_movies_id])

            self.movie_results[movie] = self.movies[min_movies_id]
            self.dist_results[movie] = distances[min_movies_id]
            # print(movie_id)
            # print(np.sort(distances))
            # print(min_movies_id)


#def mfact(train_file, test_file, movie_map):

mf =MF("Prob3_ratings.csv","Prob3_ratings_test.csv","Prob3_movies.txt")
print(mf)
mf.find_map()
# print(mf.R)


# In[ ]:





# In[ ]:





# In[ ]:





answer:

   s.no.   Object     RMSE
0      1 -90961.8  1.11737
4      5 -90998.3  1.13389
2      3 -91061.2  1.08993
5      6 -91073.1  1.14357
9     10 -91139.1  1.10003
3      4   -91181   1.1041
7      8 -91238.2    1.133
6      7 -91246.4  1.10479
8      9 -91272.8  1.11583
1      2 -91489.5  1.11972
                                        Star Wars  \
0                 Empire Strikes Back, The (1980)   
1                  Raiders of the Lost Ark (1981)   
2                       Return of the Jedi (1983)   
3                      Usual Suspects, The (1995)   
4       Indiana Jones and the Last Crusade (1989)   
5  Manon of the Spring (Manon des sources) (1986)   
6                       Back to the Future (1985)   
7                                   Gandhi (1982)   
8                              Prefontaine (1997)   
9                Shawshank Redemption, The (1994)   

                                        My Fair Lady  \
0                                Mary Poppins (1964)   
1                                     Sabrina (1954)   
2                                        Emma (1996)   
3                          Gone with the Wind (1939)   
4  Return of Martin Guerre, The (Retour de Martin...   
5                         Sound of Music, The (1965)   
6                                    SubUrbia (1997)   
7                                Little Women (1994)   
8                         Room with a View, A (1986)   
9                            Parent Trap, The (1961)   

                               GoodFellas  
0                Full Metal Jacket (1987)  
1  Good, The Bad and The Ugly, The (1966)  
2                           Casino (1995)  
3      People vs. Larry Flynt, The (1996)  
4                          Platoon (1986)  
5                            Alien (1979)  
6     Once Upon a Time in the West (1969)  
7                   Apocalypse Now (1979)  
8                     True Romance (1993)  
9                   Cool Hand Luke (1967)  
   Star Wars  My Fair Lady  GoodFellas
0   0.313692      0.789353    0.630612
1   0.555792      0.987386    0.720748
2   0.640276      0.996716    0.798156
3   0.804306      1.013789    0.833993
4   0.857635      1.020244    0.892925
5   0.927454      1.039932    0.907277
6   0.928463      1.042708    0.915274
7   0.956584      1.044472    0.941107
8   0.965090      1.083621    0.954426
9   0.975334      1.088132    0.957903
