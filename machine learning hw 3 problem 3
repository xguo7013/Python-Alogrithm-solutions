import numpy as np
import pandas as pd
import csv
import matplotlib.pylab as plt
import sys


class matrix_factorization(object):

    def __init__(self, train_file, test_file, metadata_file,
                 nusers=943, nmovies=1682,
                 var=0.25, d=10, lmb=1):
        self.nusers = nusers
        self.nmovies = nmovies

        self.var = var
        self.d = int(d)
        self.lmb= int(lmb)

        self.load_data(train_file, test_file)
        self.load_metadata(metadata_file)

    def load_metadata(self,file):
        with open(file) as f:
            self.movies = np.array([x.rstrip('\n') for x in f.readlines()])
        # print(self.movies.shape)
        # print(len(self.movies))
        # print(self.movies[:5])

    def create_matrix_from_file(self,file,train=False,test=False):
        #declare M:
        matrix = np.repeat(np.nan,self.nusers*self.nmovies).reshape(self.nusers, self.nmovies)
        # print(self.M.shape)

        #load info into it:
        with open(file) as f:
            for row in f:
                val = row.rstrip('\n').split(',')
                # print(val)
                matrix[int(val[0])-1, int(val[1])-1] = float(val[2])
                if train:
                    self.num_train_cases+=1
                if test:
                    self.num_test_cases+=1
        return matrix

    def load_data(self,train_file, test_file):
        
        self.num_train_cases = 0
        self.num_test_cases = 0

        self.M = self.create_matrix_from_file(train_file, train=True)
        self.Mtest = self.create_matrix_from_file(test_file, test=True)        
        # print(self.M.shape, self.Mtest.shape)

    def generate_data(self):
        self.Q = np.repeat(np.nan,self.nusers*self.d).reshape(self.nusers, self.d)
        self.R = np.random.multivariate_normal(np.repeat(0,self.d),
                                               np.identity(self.d)/self.lmb,
                                               self.nmovies).T
        # print(self.Q.shape, self.R.shape)

    def calc_error(self, matrix):

        predicted = self.Q.dot(self.R)
        observed_ind = ~np.isnan(matrix)

        error = ((matrix[observed_ind] - predicted[observed_ind])**2).sum()
        return error

    def calc_sqsum(self,matrix):
        return (matrix**2).sum()

    def run_algorithm(self):

        self.objective = []
        for p in range(100):
            for i in range(self.nusers):
                observed_ind = ~np.isnan(self.M[i,:])
                # print(sum(observed_ind))
                Ri = self.R[:,observed_ind]
                Mi = self.M[i,observed_ind]
                # print(Ri.shape, Mi.shape)
                self.Q[i,:] = np.linalg.inv( Ri.dot(Ri.T) + 
                                        self.lmb*self.var*np.identity(self.d)).dot(Ri.dot(Mi.T))

            for j in range(self.nmovies):
                observed_ind = ~np.isnan(self.M[:,j])
                # print(sum(observed_ind))
                Qj = self.Q[observed_ind,:]
                Mj = self.M[observed_ind,j]
                # print(Ri.shape, Mi.shape)
                self.R[:,j] = np.linalg.inv(Qj.T.dot(Qj)+self.lmb*self.var*np.identity(self.d)).dot(Qj.T.dot(Mj.T))

            # print(np.isnan(self.Q).sum(),np.isnan(self.R).sum())
            # print(self.calc_sqsum(self.Q),self.calc_sqsum(self.R),self.calc_error(self.M))
            if p>1:
                obj_neg = ( self.calc_error(self.M)/(2*self.var) + 
                           self.calc_sqsum(self.Q)*self.lmb/2 + 
                           self.calc_sqsum(self.R)*self.lmb/2 )
                self.objective.append(-obj_neg)
            # print(self.obj_neg)

    def find_map(self):

        num_runs = 10
        x_vals = list(range(2,100))

        #initialize table
        results = pd.DataFrame(index=range(num_runs),
                               columns=['s.no.','objective','test_rmse'])

        #get predictions for required movies:
        self.query_movies = ["Star Wars", "My Fair Lady", "GoodFellas"]
        self.movie_results = pd.DataFrame(index=range(10),
                                     columns=self.query_movies)
        self.dist_results = pd.DataFrame(index=range(10),
                                     columns=self.query_movies)

        #define minimum objective:
        max_obj = -np.inf
        results['s.no.'] = list(range(1,num_runs+1))

        plt.figure()
        for i in range(num_runs):
            self.generate_data()

            self.run_algorithm()

            plt.plot(x_vals, self.objective, label='run_%d'%(i+1))

            #get objective:
            results.loc[i,'objective'] = self.objective[-1]
            results.loc[i,'test_rmse'] = np.sqrt(self.calc_error(self.Mtest)/self.num_test_cases)

            #update movie pred if required:
            if self.objective[-1]>max_obj:
                max_obj = self.objective[-1]
                self.update_query_results()

        plt.xticks([int(x) for x in np.linspace(2,100,10)])
        plt.xlabel('Iteration')
        plt.ylabel('Objective Function')
        plt.title('Objective function for 10 runs')
        plt.legend(loc='best')
        plt.savefig('hw4_2a_obj.png')
        plt.show()

        #export objective:
        results = results.sort_values(by='objective',axis=0,ascending=False)
        print(results)
        results.to_csv('hw4_2a_obj_rmse.csv',index=False)

        #print query results
        print(self.movie_results)
        print(self.dist_results)

        self.movie_results.to_csv('hw4_2b_query_movie.csv',index=False)
        self.dist_results.to_csv('hw4_2b_query_distances.csv',index=False)
    
    def update_query_results(self):

        for movie in self.query_movies:
            movie_id = [i for i in range(self.nmovies) 
                        if movie in self.movies[i]][0]
            # print(movie_id)
            distances = np.sqrt(((self.R - self.R[:,movie_id].reshape(-1,1))**2).sum(axis=0))
            
            # print(distances.shape)
            min_movies_id = np.argsort(distances)[1:11]
            # print(min_movies_id)
            # print(self.movies[min_movies_id])

            self.movie_results[movie] = self.movies[min_movies_id]
            self.dist_results[movie] = distances[min_movies_id]
            # print(movie_id)
            # print(np.sort(distances))
            # print(min_movies_id)


#def mfact(train_file, test_file, movie_map):

mf = matrix_factorization("Prob3_ratings.csv","Prob3_ratings_test.csv","Prob3_movies.txt")
print(mf)
mf.find_map()
#print(mf.R)

#train_file, test_file, movie_map
# def main():
#     args = sys.argv

#     #call naive bayes
#     if 'kmeans' in args:
#         kmeans()

#     if 'mf' in args:
#         trainf = "data/Prob3_ratings.csv"
#         testf = "data/Prob3_ratings_test.csv"
#         mmap = "data/Prob3_movies.txt"
#         mfact(trainf, testf, mmap)

answer:

  s.no. objective test_rmse
6      7  -91061.2   1.12351
5      6  -91066.4   1.13451
9     10    -91096    1.0973
8      9  -91100.7   1.09021
0      1    -91137    1.0908
1      2  -91141.6   1.19208
4      5  -91155.4   1.10323
7      8  -91168.5   1.09885
3      4    -91309   1.09508
2      3  -91429.8   1.15054
                            Star Wars  \
0     Empire Strikes Back, The (1980)   
1      Raiders of the Lost Ark (1981)   
2           Return of the Jedi (1983)   
3               My Man Godfrey (1936)   
4   Man Who Would Be King, The (1975)   
5  Searching for Bobby Fischer (1993)   
6                       Aliens (1986)   
7                        Alien (1979)   
8          Blues Brothers, The (1980)   
9            L.A. Confidential (1997)   

                                        My Fair Lady  \
0                                Mary Poppins (1964)   
1                                   My Family (1995)   
2                       American in Paris, An (1951)   
3                                 Shadowlands (1993)   
4                         Sound of Music, The (1965)   
5        Winnie the Pooh and the Blustery Day (1968)   
6                          Gone with the Wind (1939)   
7                       It Happened One Night (1934)   
8                            Jungle Book, The (1994)   
9  Return of Martin Guerre, The (Retour de Martin...   

                               GoodFellas  
0                 Bonnie and Clyde (1967)  
1                           Casino (1995)  
2                Full Metal Jacket (1987)  
3          Godfather: Part II, The (1974)  
4  Good, The Bad and The Ugly, The (1966)  
5                         Swingers (1996)  
6                   Cool Hand Luke (1967)  
7            2001: A Space Odyssey (1968)  
8      People vs. Larry Flynt, The (1996)  
9                   Godfather, The (1972)  
   Star Wars  My Fair Lady  GoodFellas
0   0.312248      0.756742    0.657458
1   0.603655      0.882977    0.703533
2   0.639407      0.901677    0.706866
3   0.817459      0.918155    0.718671
4   0.875140      0.986888    0.778050
5   0.879320      1.009737    0.827704
6   0.884257      1.018953    0.869655
7   0.936437      1.066992    0.893826
8   0.948960      1.069082    0.897441
9   0.949951      1.079111    0.904553
